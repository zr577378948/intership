package com.ouya.zr.file;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.junit.Test;

public class TestFileInputOutputStream {

	/*
	 * 从键盘写入一个字节读取并该文件
	 */
	
	@Test
	public void FileInputOutOutStream1(){
		File f1 = new File("e:"+File.separator+"hello4.txt");
		File f = new File("e:"+File.separator+"hello4.txt");
		
		
		FileOutputStream fs1 = null;
		FileInputStream fs = null;
		try {
			fs1 = new FileOutputStream(f1);
			fs = new FileInputStream(f);
			fs1.write(new String("jkhkajshfjka111").getBytes());
			
			byte[] b = new byte[20];
			int len;
			while((len=fs.read(b))!=-1){
				String str = new String(b, 0, len);
				System.out.println(str);
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if(fs1!=null){
	 	try {
			fs1.close();
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
		
			if(fs!=null){
			 	try {
					fs.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
		}
	}
		}
	}
	
	
	/*
	 * 从键盘读取一个文件并在该文件写入字节（相当于覆盖文件的内容）
	 */
	@Test
	public void FileInputOutOutStream(){
		File f = new File("e:"+File.separator+"hello2.txt");
		File f1 = new File("e:"+File.separator+"hello3.txt");
		FileInputStream fs = null;
		FileOutputStream fs1 = null;
		
		try {
			
			fs = new FileInputStream(f);
			fs1 = new FileOutputStream(f1);
			
			byte[] b = new byte[20];
			int len;
			while((len=fs.read(b))!=-1){
				fs1.write(b, 0, len);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if(fs!=null){
			 	try {
					fs.close();
				} catch (IOException e) {
					e.printStackTrace();
				}finally{
					if(fs1!=null){
			 	try {
					fs1.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
				}
			}
			
		}
	}
	
	/*
	 * FileOutputStream写字节
	 */
	@Test
	public void FileOutputStream(){
		//创建一个File对象，表明要写入的位置
		//输出的物理文件卡可以不存在，若不存在，可以自动创建；若存在，会将原有的文件覆盖
		File f = new File("e:"+File.separator+"hello1.txt");
		//创建一个FileOutputStream对象，将f的对象作为形参传递给FileOutputStream构造器中
		FileOutputStream fs = null;
		try {
			fs = new FileOutputStream(f);
			//写入的操作
			fs.write(new String("hellohaha").getBytes());
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			//关闭流
			if(fs!=null){
				try {
					fs.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/*
	 * FileInputStream读字节
	 */
	@Test
	public void testFileInputStream3() {

		FileInputStream fs = null;
		try {
			File f = new File("e:"+File.separator+"hello.txt");
			fs = new FileInputStream(f);
			
			byte b[] = new byte[5];//每次读取的数据要写入的数组
			int len;//每次读取的字节长度
			while((len=fs.read(b))!=-1){
				/*for (int i = 0; i < len; i++) {
					System.out.println((char)b[i]);
				}*/
				String str = new String(b, 0, len);
				System.out.print(str);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(fs!=null){
		try {
			fs.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}}

	// 使用try-catch的方式处理以下异常更合理:保证流的关闭操作能够正常的执行
	
	@Test
	public void testFileInputStream2() {
		// 1.创建一个File类的对象
		// 2.创建一个FileInputStream类的对象
		FileInputStream fs = null;
		try {
			File f = new File("e:" + File.separator + "hello.txt");
			fs = new FileInputStream(f);
			// 3.调用FileInputStream的方法读取file文件
			
// read：读取文件的一个字节，当执行到文件结尾时，返回-1
			 
			int b = fs.read();
			while (b != -1) {
				System.out.println((char) b);
				b = fs.read();
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// 4.关闭相应的流
			if (fs != null) {
				try {
					fs.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	// 从硬盘存在的一个文件中，读取其内容到程序中,使用FileInputSteam
	// 要读取的文件一定要存在，否则会抛FileNotFoundException异常
	@Test
	public void testFileInputStream1() throws Exception {
		// 1.创建一个File类的对象
		File f = new File("e:" + File.separator + "hello.txt");
		// 2.创建一个FileInputStream类的对象
		FileInputStream fs = new FileInputStream(f);
		// 3.调用FileInputStream的方法读取file文件
		
//read：读取文件的一个字节，当执行到文件结尾时，返回-1
		 
		int b = fs.read();
		while (b != -1) {
			System.out.println((char) b);
			b = fs.read();
		}
		// 4.关闭相应的流
		if (fs != null) {
			fs.close();
		}
	}
}
