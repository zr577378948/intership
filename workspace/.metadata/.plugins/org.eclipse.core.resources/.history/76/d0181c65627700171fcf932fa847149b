package com.ouya.zr.file;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.junit.Test;

public class TestFileInputOutputStream {

	@Test
	public void testFileInputStream3() {

		File f = new File("e:"+File.separator+"hello.txt");
		FileInputStream fs = new FileInputStream(f);
		
		byte b[] = new byte[20];
		int len;
		while((len=fs.read(b))!=-1){
			for (int i = 0; i < b.length; i++) {
				
			}
		}
	}

	// 使用try-catch的方式处理以下异常更合理:保证流的关闭操作能够正常的执行
	@Test
	public void testFileInputStream2() {
		// 1.创建一个File类的对象
		// 2.创建一个FileInputStream类的对象
		FileInputStream fs = null;
		try {
			File f = new File("e:" + File.separator + "hello.txt");
			fs = new FileInputStream(f);
			// 3.调用FileInputStream的方法读取file文件
			/*
			 * read：读取文件的一个字节，当执行到文件结尾时，返回-1
			 */
			int b = fs.read();
			while (b != -1) {
				System.out.println((char) b);
				b = fs.read();
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// 4.关闭相应的流
			if (fs != null) {
				try {
					fs.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	// 从硬盘存在的一个文件中，读取其内容到程序中,使用FileInputSteam
	// 要读取的文件一定要存在，否则会抛FileNotFoundException异常
	@Test
	public void testFileInputStream1() throws Exception {
		// 1.创建一个File类的对象
		File f = new File("e:" + File.separator + "hello.txt");
		// 2.创建一个FileInputStream类的对象
		FileInputStream fs = new FileInputStream(f);
		// 3.调用FileInputStream的方法读取file文件
		/*
		 * read：读取文件的一个字节，当执行到文件结尾时，返回-1
		 */
		int b = fs.read();
		while (b != -1) {
			System.out.println((char) b);
			b = fs.read();
		}
		// 4.关闭相应的流
		if (fs != null) {
			fs.close();
		}
	}
}
